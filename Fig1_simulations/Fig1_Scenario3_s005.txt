// Positive selection (s = 0.05) in the admixed population only + Background selection with gene content, recombination rate and mutation rate map

initialize(){
  // read Mutation map
  mr_lines=readFile("/PATH/TO/MUTATION/MAP");
  mr_rates=NULL;
  for (line in mr_lines)
  {
    components=strsplit(line,"\t");
    mr_rate=c(mr_rates,asFloat(components[0]));
  }
  //rescaling mutation rates
  initializeMutationRate(mr_rate*10);
  initializeMutationType("m1",0.5,"f",0.0);
  // Define deleterious mutations with fitness effect drawn from European based gamma distribution from Boyko et al 2008, values are already rescaled
  initializeMutationType("m2",0.5,"g",-0.2998091,0.206);
  // Define ancestry-tracking mutations, specific of parental population 1
  initializeMutationType("m3",0.5,"f",0);
  m3.convertToSubstitution=F;
  initializeGenomicElementType("g1",m1,1.0);
  // Define exons as genetic elements, where non-synonymous mutations are 3 time more frequent than synonymous mutations
  initializeGenomicElementType("g2",c(m1,m2),c(1.0,3.0));
  // read gene content map
  gc_lines=readFile("/PATH/TO/GENE/MAP");
  for (line in gc_lines)
  {
    components=strsplit(line,"\t");
    gel=g1;
    if (components[2]=="Exon")
    {
      gel=g2;
    }
    initializeGenomicElement(gel,asInteger(components[0]),asInteger(components[1]));
  }
  // read Recombination map
  rm_lines=readFile("/PATH/TO/RECOMBINATION/MAP");
  rm_rates=NULL;
  rm_ends=NULL;
  for (line in rm_lines)
  {
    components=strsplit(line,"\t");
    rm_ends=c(rm_ends,asInteger(components[1]));
    rm_rates=c(rm_rates,asFloat(components[0]));
  }
  // rescaling recombination rates
  initializeRecombinationRate(rm_rates*10,rm_ends);
}

// Create the ancestral population
1 {
    // save this run's identifier, used to save and restore
    defineConstant("simID",getSeed());
    sim.addSubpop("p1",1000);
}

// Create the parental populations from the ancestal population, which is deleted from the simulation to reduce computational intensity
4000 {
  sim.addSubpopSplit("p2",1000,p1);
  sim.addSubpopSplit("p3",1000,p1);
  p1.setSubpopulationSize(0);
}

// Introduce ancestry-tracking mutations in parental population 1 (p2)
4001 late() {
  // save the state of the simulation
  sim.outputFull("/PATH/TO/TEMPDIRECTORY/tmp/slim_" + simID + ".txt");
  // add ancestry-tracking mutations at central positions
  target = sample(p2.genomes,1);
  target.addNewDrawnMutation(m3,999500:1000500);
}

// Create the admixed population from a single pulse admixture event coming from both parental populations (migration rates are set to 0 the next generation)
4200 late() {
  sim.addSubpop("p4",1000);
  p4.setMigrationRates(c(p2,p3),c(0.35,0.65));

}

4201 late() {
  p4.setMigrationRates(c(p2,p3),c(0,0));
  // choose a single ancestry-tracking mutation to become beneficial in the admixed population
  muts = sim.mutationsOfType(m3);
  muts = muts[sim.mutationFrequencies(p4, muts) > 0.035];
  cat(size(muts) + ".\n");
  if (size(muts)>0)
  {
    mut = sample(muts, 1);
    mut.setSelectionCoeff(0.5);
    // add tag to the chosen beneficial mutatation, will be used in the condition to restore a previous state
    mut.tag = 1;
  }
  else
  {
    cat(simID + ": No contender of sufficient frequency found.\n");
    // go back to the generation when ancestry-tracking mutations were introduced
    sim.readFromPopulationFile("/PATH/TO/TEMPDIRECTORY/tmp/slim_" + simID + ".txt");

    //start a newly seeded run by increasing the previous seed
    setSeed(getSeed() + 1);

    // add ancestry-tracking mutations at central positions
    target = sample(p2.genomes,1);
    target.addNewDrawnMutation(m3,999500:1000500);

  }

}

// Beneficial mutation is neutral in parental population 1 (p2)
4202: fitness(m3, p2) { return 1.0; }

4202: late()  {
  muts = sim.mutationsOfType(m3);
  mut = muts[muts.tag == 1];
  // define condition to restore a previous state: if  the beneficial mutation is lost in the simulation or if the beneficial mutation is at very low frequency in the admixed population (risk to be unsampled at the end of the simulation)
  if (size(mut)==1)
  {
    if (sim.mutationFrequencies(p4,mut)>0.02)
    {
      cat(simID + ":PASS!\n");
      sim.deregisterScriptBlock(self);
    }
    else
    {
      cat(simID + ": LOST IN ADM - RESTARTING\n");
      // go back to the generation when ancestry-tracking mutations were introduced
      sim.readFromPopulationFile("/PATH/TO/TEMPDIRECTORY/tmp/slim_" + simID + ".txt");

      //start a newly seeded run by increasing the previous seed
      setSeed(getSeed() + 1);

      // add ancestry-tracking mutations at central positions
      target = sample(p2.genomes,1);
      target.addNewDrawnMutation(m3,999500:1000500);

    }
  }
  else
  {
    cat(simID + ": LOST - RESTARTING\n");

    // go back to the generation when the ancestry-tracking mutations were introduced
    sim.readFromPopulationFile("/PATH/TO/TEMPDIRECTORY/tmp/slim_" + simID + ".txt");

    //start a newly seeded run by increasing the previous seed
    setSeed(getSeed() + 1);

    // add ancestry-tracking mutations at central positions
    target = sample(p2.genomes,1);
    target.addNewDrawnMutation(m3,999500:1000500);

  }
}

4208 late(){
    p4.outputVCFSample(50,filePath="Fig1_Scenario3_s005_PADM.vcf");
    p3.outputVCFSample(50,filePath="Fig1_Scenario3_s005_P2.vcf");
    p2.outputVCFSample(50,filePath="Fig1_Scenario3_s005_P1.vcf");
}
